{
	"info": {
		"_postman_id": "701e1ab7-febc-4e4d-b5c6-29416033f57c",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36755344"
	},
	"item": [
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the returned page is correct\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the returned per_page is correct\", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the correction of ID of all users of this page\", function () {\r",
							"    var dataArray = jsonData.data;\r",
							"    pm.expect(dataArray[0].id).to.eql(7);\r",
							"    pm.expect(dataArray[1].id).to.eql(8);\r",
							"    pm.expect(dataArray[2].id).to.eql(9);\r",
							"    pm.expect(dataArray[3].id).to.eql(10);\r",
							"    pm.expect(dataArray[4].id).to.eql(11);\r",
							"    pm.expect(dataArray[5].id).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the correction of first name of all users of this page\", function () {\r",
							"    var dataArray = jsonData.data;\r",
							"    pm.expect(dataArray[0].first_name).to.eql(\"Michael\");\r",
							"    pm.expect(dataArray[1].first_name).to.eql(\"Lindsay\");\r",
							"    pm.expect(dataArray[2].first_name).to.eql(\"Tobias\");\r",
							"    pm.expect(dataArray[3].first_name).to.eql(\"Byron\");\r",
							"    pm.expect(dataArray[4].first_name).to.eql(\"George\");\r",
							"    pm.expect(dataArray[5].first_name).to.eql(\"Rachel\");\r",
							"});\r",
							"\r",
							"pm.test(\"Searching for specific user exist or not using his first name\", function () {\r",
							"    var userExistance = false;\r",
							"    var dataArray = jsonData.data;\r",
							"    for(var i = 0;i<dataArray.length ; i++)\r",
							"    {\r",
							"        if(dataArray[i].first_name == \"Byron\")\r",
							"        {\r",
							"            userExistance = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    pm.expect(userExistance).to.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users?page=2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  single user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomValue = Math.floor(Math.random()*(12-1+1))+1;\r",
							"pm.environment.set(\"randomUser\", randomValue);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the returned user id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var random_user = pm.environment.get(\"randomUser\");\r",
							"    pm.expect(jsonData.data.id).to.eql(random_user);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users/{{randomUser}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"{{randomUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\":\"Mahmoud\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/23",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Resource",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single resource",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single resource not found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown/23",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update using PUT method",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update using Patch method Copy",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete single user",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register with new user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\",\r\n   \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuccessful register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Successful Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"email\": \"eve.holt@reqres.in\",\r\n   \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users?delay=3",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Verify that Response time is less than 1 second\", function (){\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});"
				]
			}
		}
	]
}